#!/usr/bin/env python3
# By Rayhan0x01
import re, requests
from bs4 import BeautifulSoup

headers = {
	"User-Agent":"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:76.0) Gecko/20100101 Firefox/76.0"
}

def get_vuln_by_cve(cveid):
	req = requests.get('https://www.cvedetails.com/cve/CVE-%s/' % cveid, headers=headers)
	soup = BeautifulSoup(req.text, 'html.parser')
	table1 = str(soup.find('table', id="vulnprodstable"))
	os_list1 = re.findall('title=\"Product Details (.*?)\"',table1)
	st = []
	for w in os_list1:
		if w.startswith('Microsoft '):
			w = w.replace('Microsoft ','')
		finalkey = ""
		if w.startswith('Windows 2000'):
			finalkey = "win_2000"
		elif w.startswith('Windows Vista'):
			finalkey = "win_vista"
		elif w.startswith('Windows 7'):
			finalkey = "win_7"
		elif w.startswith('Windows 10'):
			finalkey = "win_10"
		elif w.startswith('Windows XP'):
			finalkey = "win_xp"
		elif w.startswith('Windows 8.1'):
			finalkey = "win_8.1"
		elif w.startswith('Windows 8'):
			finalkey = "win_8"
		elif w.startswith('Windows Server'):
			fname = re.findall('Windows Server (\d+)',w)
			if fname:
				finalkey = "win_server_" + str(fname[0])
			else:
				fname = "win_server"

		else:
			# print('Could not extract : %s' % w)
			continue
		if "Service Pack" in w:
			sps = []
			sps = re.findall(r'Service Pack (\d)',w)
			if sps:
				for sp in sps:
					finalkey = finalkey + " " + "sp_" + str(sp)
		elif " SP" in w:
			sps = re.findall(r' SP(\d)',w)
			if sps:
				for sp in sps:
					finalkey = finalkey + " " + "sp_" + str(sp)
		if "Version" in w:
			sps = re.findall(r'Version (\d+) ',w)
			if sps:
				for sp in sps:
					finalkey = finalkey + " " + "version_" + str(sp)
		if "x64" in w:
			finalkey = finalkey + " arc_x64"
		if "x86" in w:
			finalkey = finalkey + " arc_x86"
		elif "32-bit" in w:
			finalkey = finalkey + " arc_x86"
		if "x64" not in finalkey and "x86" not in finalkey:
			finalkey2 = finalkey + " arc_x86"
			finalkey3 = finalkey + " arc_x64"
			st.append(finalkey2)
			st.append(finalkey3)
		else:
			st.append(finalkey)
	st = list(set(st))
	return(st)

def get_vuln_by_bid(bid):
	req = requests.get('https://www.securityfocus.com/bid/%s/info' % bid, headers=headers)
	#soup = BeautifulSoup(req.text,'html.parser')
	src = req.text
	#print(src)
	tdsrc = re.findall('Vulnerable:<\/span>(.*?)</tr>',src,re.DOTALL)[0]
#	 print(tdsrc)
	oslist = re.findall('Microsoft Windows (.*?)<br',tdsrc)
	oslist = ["Windows " + x.strip() for x in oslist]
	st = []
	for w in oslist:
		finalkey = ""
		if w.startswith('Microsoft Windows 2000'):
			finalkey = "win_2000"
		elif w.startswith('Windows Vista'):
			finalkey = "win_vista"
		elif w.startswith('Windows 7'):
			finalkey = "win_7"
		elif w.startswith('Windows 10'):
			finalkey = "win_10"
		elif w.startswith('Windows XP'):
			finalkey = "win_xp"
		elif w.startswith('Windows 8.1'):
			finalkey = "win_8.1"
		elif w.startswith('Windows 8'):
			finalkey = "win_8"
		elif w.startswith('Windows RT'):
			finalkey = "win_rt"
		elif w.startswith('Windows Server'):
			fname = re.findall('Windows Server (\d+)',w)
			if fname:
				finalkey = "win_server_" + str(fname[0])
			else:
				fname = "win_server"

		else:  
			# print('Could not extract : %s' % w)
			continue
		if "Service Pack" in w:
			sps = []
			sps = re.findall(r'Service Pack (\d)',w)
			if sps:
				for sp in sps:
					finalkey = finalkey + " " + "sp_" + str(sp)
		elif " SP" in w:
			sps = re.findall(r' SP(\d)',w)
			if sps:
				for sp in sps:
					finalkey = finalkey + " " + "sp_" + str(sp)
		if "Version" in w:
			sps = re.findall(r'Version (\d+) ',w)
			if sps:
				for sp in sps:
					finalkey = finalkey + " " + "version_" + str(sp)
		if "x64" in w:
			finalkey = finalkey + " arc_x64"
		if "x86" in w:
			finalkey = finalkey + " arc_x86"
		elif "32-bit" in w:
			finalkey = finalkey + " arc_x86"
		if "x64" not in finalkey and "x86" not in finalkey:
			finalkey = finalkey + " arc_x86"
		st.append(finalkey)
	st = list(set(st))
	return(st)

def get_vuln_by_msid(msid):
	year = "20" + msid[2:4]
	req = requests.get('https://docs.microsoft.com/en-us/security-updates/securitybulletins/'+year+'/'+msid, headers=headers)
	soup = BeautifulSoup(req.text, 'html.parser')
	table1 = str(soup.findAll("table")[0])
	os_list1 = re.findall('<td><a href=\".+?familyid=.+?\" data-linktype=\"external\">(.*?)<\/a><\/td>',table1)
	if not os_list1:
		os_list = re.findall('<td style=\"border:1px solid black;\">\\n\[(.*?)\]\(',table1)
		os_list1 = [x for x in os_list if '**' not in x and 'Windows' in x]
	if not os_list1:
		os_list = re.findall('<td><a.+?familyid.+?>(.*?)<\/a>',table1)
		os_list1 = [x for x in os_list if '**' not in x and 'Windows' in x]
	if not os_list1:
		os_list = re.findall('<a data-linktype=\"external\" href=\".+?familyid=.+?\">(.*?)</a>',table1)
		os_list1 = [x for x in os_list if '**' not in x and 'Windows' in x]
	st = []
	for w in os_list1:
		finalkey = ""
		if w.startswith('Microsoft Windows 2000'):
			finalkey = "win_2000"
		elif w.startswith('Windows Vista'):
			finalkey = "win_vista"
		elif w.startswith('Windows 7'):
			finalkey = "win_7"
		elif w.startswith('Windows 10'):
			finalkey = "win_10"
		elif w.startswith('Windows XP'):
			finalkey = "win_xp"
		elif w.startswith('Windows 8.1'):
			finalkey = "win_8.1"
		elif w.startswith('Windows 8'):
			finalkey = "win_8"
		elif w.startswith('Windows Server'):
			fname = re.findall('Windows Server (\d+)',w)
			if fname:
				finalkey = "win_server_" + str(fname[0])
			else:
				fname = "win_server"

		else:
			# print('Could not extract : %s' % w)
			continue
		if "Service Pack" in w:
			sps = []
			sps = re.findall(r'Service Pack (\d)',w)
			if sps:
				for sp in sps:
					finalkey = finalkey + " " + "sp_" + str(sp)
		elif " SP" in w:
			sps = re.findall(r' SP(\d)',w)
			if sps:
				for sp in sps:
					finalkey = finalkey + " " + "sp_" + str(sp)
		if "Version" in w:
			sps = re.findall(r'Version (\d+) ',w)
			if sps:
				for sp in sps:
					finalkey = finalkey + " " + "version_" + str(sp)
		if "x64" in w:
			finalkey = finalkey + " arc_x64"
		if "x86" in w:
			finalkey = finalkey + " arc_x86"
		elif "32-bit" in w:
			finalkey = finalkey + " arc_x86"
		if "x64" not in finalkey and "x86" not in finalkey:
			finalkey = finalkey + " arc_x86"

		st.append(finalkey)
	st = list(set(st))
	return(st)


print(','.join(get_vuln_by_msid("ms09-012")))
print(','.join(get_vuln_by_bid("105153")))
print(','.join(get_vuln_by_cve("2018-0952")))